name: Build Portal Images

on:
  push:
    branches: ['develop']
  workflow_dispatch:
    inputs:
      specific_group:
        description: 'Build specific group (empty for all)'
        required: false
        type: string

env:
  YQ_VERSION: v4.40.5  # Pin YQ version for stability
  XPORTAL_VERSION: v0.2.12  # Pin xportal version

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache yq binary
        id: cache-yq
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/yq
          key: ${{ runner.os }}-yq-${{ env.YQ_VERSION }}

      - name: Install yq
        if: steps.cache-yq.outputs.cache-hit != 'true'
        run: |
          gh release download ${{ env.YQ_VERSION }} --repo mikefarah/yq --pattern 'yq_linux_amd64' --output /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Get matrix
        id: set-matrix
        run: |
          FILTER='to_entries | map(select(.value.plugins != null)) | map({group: .key, plugins: .value.plugins, version: (.value.version // "latest")})'
          if [ "${{ inputs.specific_group }}" != "" ]; then
            FILTER="$FILTER | map(select(.group == \"${{ inputs.specific_group }}\"))"
          fi
          echo "matrix=$(yq -o=j '.groups' groups.yaml | jq -c "{include: ($FILTER)}" | jq -c .include)" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.matrix) }}
      fail-fast: false
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: go.sum

      # Cache xportal download but not the build
      - name: Cache xportal binary
        id: cache-xportal
        uses: actions/cache@v4
        with:
          path: ~/go/bin/xportal
          key: ${{ runner.os }}-xportal-${{ env.XPORTAL_VERSION }}

      - name: Install xportal with retry
        if: steps.cache-xportal.outputs.cache-hit != 'true'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_wait_seconds: 30
          command: |
            GOSUMDB=off GOPROXY=direct go install go.lumeweb.com/xportal/cmd/xportal@${{ env.XPORTAL_VERSION }}

      - name: Build portal with retry
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 60
          command: |
            PLUGINS=$(echo '${{ toJSON(matrix.plugins) }}' | jq -r 'join(" --with ")')
            GOPROXY=direct XPORTAL_DISABLE_CGO=1 PORTAL_VERSION="${{ matrix.version }}" xportal build --with $PLUGINS

      - uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase names
        id: names
        run: |
          echo "repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
          echo "group=${MATRIX_GROUP,,}" >> $GITHUB_OUTPUT
        env:
          MATRIX_GROUP: ${{ matrix.group }}

      # Improved Docker layer caching
      - name: Build and push Docker image with retry
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 60
          command: |
            docker buildx build \
              --push \
              --cache-from type=gha,scope=docker-${{ matrix.group }} \
              --cache-to type=gha,mode=max,scope=docker-${{ matrix.group }} \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              --tag ghcr.io/${{ steps.names.outputs.repo }}:${{ steps.names.outputs.group }} \
              .